/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Behavior Settings */
&sk {
  release-after-ms = <250>;
  quick-release;
};

&sl {
  release-after-ms = <250>;
};

/ {
    behaviors {
        sm: sticky_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_MOD";
            #binding-cells = <1>;
            release-after-ms = <60000>;
            bindings = <&kp>;
            ignore-modifiers;
            quick-release;
        };
    };

    macros {
        slnav: sl_nav {
            label = "SL_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp K_CANCEL>
                , <&macro_press &sl NAV_L>
                , <&macro_pause_for_release>
                , <&macro_release &sl NAV_L>
                ;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */

         /* Letters */
        v { key-positions = <1 2>; bindings = <&kp V>; layers = <DEF_L>; };
        q { key-positions = <1 3>; bindings = <&kp Q>; layers = <DEF_L>; };
        z { key-positions = <20 21>; bindings = <&kp Z>; layers = <DEF_L>; };

        /* Brackets */
        lbkt { key-positions = <1 11>; bindings = <&kp LBKT>; layers = <DEF_L SYM_L NUM_L>; };
        rbkt { key-positions = <8 18>; bindings = <&kp RBKT>; layers = <DEF_L SYM_L NUM_L>; };
        lpar { key-positions = <2 12>; bindings = <&kp LPAR>; layers = <DEF_L SYM_L NUM_L>; };
        rpar { key-positions = <7 17>; bindings = <&kp RPAR>; layers = <DEF_L SYM_L NUM_L>; };
        lbrc { key-positions = <3 13>; bindings = <&kp LBRC>; layers = <DEF_L SYM_L NUM_L>; };
        rbrc { key-positions = <6 16>; bindings = <&kp RBRC>; layers = <DEF_L SYM_L NUM_L>; };

        /* Convenience */
        esc { key-positions = <3 4>; bindings = <&kp ESC>; };
        del { key-positions = <13 14>; bindings = <&kp DEL>; };
        slall { key-positions = <20 21>; bindings = <&kp SLALL>; layers = <NAV_L>; };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp W     &kp F     &kp M     &kp P     &kp G       &kp K     &kp U     &kp O     &kp Y     &kp QUOT
                &kp R     &kp S     &kp N     &kp T     &kp B       &kp J     &kp A     &kp E     &kp I     &kp H
                          &kp C     &kp L     &kp D                           &kp X     &kp COMMA &kp DOT
                                    &slnav    &kp SPACE             &sk LSHFT &sl SYM_L
            >;
        };
        nav_layer {
            label = "Nav";
            bindings = <
                &kp F1    &kp F2    &kp F3    &kp F4    &kp F5      &kp ESC   &kp HOME  &kp UARW  &kp END   &kp PG_UP
                &sm LGUI  &sm LALT  &sm LSHFT &sm LCTRL &kp UNDO    &kp DEL   &kp LARW  &kp ENTER &kp RARW  &kp PG_DN
                          &kp CUT   &kp COPY  &kp PASTE                       &kp BSPC  &kp DARW  &kp TAB
                                              &trans    &trans      &trans    &trans
            >;
        };
        sym_layer {
            label = "Sym";
            bindings = <
                &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp SEMI  &kp COLON &kp GRAVE
                &kp QMARK &kp MINUS &kp EQUAL &kp ASTRK &kp TILDE   &kp PIPE  &sm LCTRL &sm LSHFT &sm LALT  &sm LGUI
                          &kp PLUS  &kp UNDER &kp FSLH                        &kp BSLH  &kp LT    &kp GT
                                              &trans    &trans      &trans    &trans
            >;
        };
        num_layer {
            label = "Num";
            bindings = <
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
                          &none     &none     &none                 &none     &none 
                                              &trans    &trans      &trans    &trans
            >;
        };
    };
};
