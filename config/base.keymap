/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define BASE_L 0
#define LOWER_L 1
#define RAISE_L 2

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Key Position Groups */
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22  // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 23 24 25  // right-hand keys
#define THUMBS 26 27 28 29                        // thumb keys

/* Behavior Settings */
&sk {
  release-after-ms = <250>;
  quick-release;
};

&sl {
  release-after-ms = <250>;
};

/ {
    behaviors {
        sm: sticky-mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICK_MOD";
            #binding-cells = <1>;
            release-after-ms = <60000>;
            bindings = <&kp>;
            ignore-modifiers;
            quick-release;
        };
        hml: home-row-left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // double tapping same key allows for repeating
            global-quick-tap-ms = <150>;         // without PR #1387 use global-quick-tap instead
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // requires PR #1423
        };
        hmr: home-row-right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // double tapping same key allows for repeating
            global-quick-tap-ms = <150>;         // without PR #1387 use global-quick-tap instead
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // requires PR #1423
        };
    };

    macros {
        sl_lower: sl-lower {
            label = "SL_LOWER";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp K_CANCEL>
                , <&macro_press &sl LOWER_L>
                , <&macro_pause_for_release>
                , <&macro_release &sl LOWER_L>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */

         /* Letters */
        v { key-positions = <1 2>; bindings = <&kp V>; layers = <BASE_L>; };
        q { key-positions = <1 3>; bindings = <&kp Q>; layers = <BASE_L>; };
        z { key-positions = <20 21>; bindings = <&kp Z>; layers = <BASE_L>; };

        /* Brackets */
        left_bracket { key-positions = <1 11>; bindings = <&kp LBKT>; };
        right_bracket { key-positions = <8 18>; bindings = <&kp RBKT>; };
        left_parenthesis { key-positions = <2 12>; bindings = <&kp LPAR>; };
        right_parenthesis { key-positions = <7 17>; bindings = <&kp RPAR>; };
        left_brace { key-positions = <3 13>; bindings = <&kp LBRC>; };
        right_brace { key-positions = <6 16>; bindings = <&kp RBRC>; };

        /* Convenience */
        esc { key-positions = <3 4>; bindings = <&kp ESC>; };
        del { key-positions = <13 14>; bindings = <&kp DEL>; };
        select_all { key-positions = <20 21>; bindings = <&kp SLALL>; layers = <LOWER_L>; };
        home { key-positions = <23 24>; bindings = <&kp HOME>; layers = <LOWER_L>; };
        end { key-positions = <24 25>; bindings = <&kp END>; layers = <LOWER_L>; };

    };

    keymap {
        compatible = "zmk,keymap";
        base_layer {
            label = "BASE";
            bindings = <
                &kp W     &kp F     &kp M     &kp P     &kp G       &kp K     &kp U     &kp O     &kp Y     &kp QUOT
                &hml LGUI R  &hml LALT S  &hml LSHFT N  &hml LCTRL T  &kp B  &kp J  &hmr LCTRL A  &hmr LSHFT E  &hmr LALT I  &hmr LGUI H
                          &kp C     &kp L     &kp D                           &kp X     &kp COMMA &kp DOT
                                    &sl_lower &kp SPACE             &sk LSHFT &sl RAISE_L
               
            >;
        };
        lower_layer {
            label = "LOWER";
            bindings = <
                &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
                &sm LGUI  &sm LALT  &sm LSHFT &sm LCTRL &kp LC(Z)   &kp DEL   &kp BSPC  &kp UARW  &kp TAB   &kp ENTER
                          &kp CUT   &kp COPY  &kp PASTE                       &kp LARW  &kp DARW  &kp RARW
                                              &trans    &trans      &trans    &trans
            >;
        };
        raise_layer {
            label = "RAISE";
            bindings = <
                &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp SEMI  &kp COLON &kp GRAVE
                &kp QMARK &kp MINUS &kp EQUAL &kp ASTRK &kp TILDE   &kp PIPE  &sm LCTRL &sm LSHFT &sm LALT  &sm LGUI
                          &kp PLUS  &kp UNDER &kp FSLH                        &kp BSLH  &kp LT    &kp GT
                                              &trans    &trans      &trans    &trans
            >;
        };
    };
};
