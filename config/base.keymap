/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define DEF_L 0
#define NUM_L 1
#define NAV_L 2

/* Behavior Settings */
&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&sk {
  release-after-ms = <250>;
  quick-release;
};

&sl {
  release-after-ms = <250>;
};

/ {
    behaviors {
        sm: sticky_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICK_MOD";
            #binding-cells = <1>;
            release-after-ms = <60000>;
            bindings = <&kp>;
            ignore-modifiers;
            quick-release;
        };
        cut: cut {
            compatible = "zmk,behavior-mod-morph";
            label = "CUT";
            #binding-cells = <0>;
            bindings = <&kp LS(DELETE)>, <&kp X>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        copy: copy {
            compatible = "zmk,behavior-mod-morph";
            label = "COPY";
            #binding-cells = <0>;
            bindings = <&kp LC(INSERT)>, <&kp C>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        paste: paste {
            compatible = "zmk,behavior-mod-morph";
            label = "PASTE";
            #binding-cells = <0>;
            bindings = <&kp LS(INSERT)>, <&kp V>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    macros {
        sl_nav: sl_nav {
            label = "SL_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp K_CANCEL>
                , <&macro_press &sl NAV_L>
                , <&macro_pause_for_release>
                , <&macro_release &sl NAV_L>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */

         /* Letters */
        v                   { key-positions = <1 2>;    bindings = <&kp V>;         layers = <DEF_L>;       };
        q                   { key-positions = <1 3>;    bindings = <&kp Q>;         layers = <DEF_L>;       };
        z                   { key-positions = <20 21>;  bindings = <&kp Z>;         layers = <DEF_L>;       };

        /* Brackets */
        left_bracket        { key-positions = <1 11>;   bindings = <&kp LBKT>;      layers = <DEF_L NUM_L>; };
        right_bracket       { key-positions = <8 18>;   bindings = <&kp RBKT>;      layers = <DEF_L NUM_L>; };
        left_parenthesis    { key-positions = <2 12>;   bindings = <&kp LPAR>;      layers = <DEF_L NUM_L>; };
        right_parenthesis   { key-positions = <7 17>;   bindings = <&kp RPAR>;      layers = <DEF_L NUM_L>; };
        left_brace          { key-positions = <3 13>;   bindings = <&kp LBRC>;      layers = <DEF_L NUM_L>; };
        right_brace         { key-positions = <6 16>;   bindings = <&kp RBRC>;      layers = <DEF_L NUM_L>; };

        /* Symbols */
        pipe                { key-positions = <1 2>;    bindings = <&kp PIPE>;      layers = <NUM_L>;       };
        backslash           { key-positions = <2 3>;    bindings = <&kp BACKSLASH>; layers = <NUM_L>;       };
        caret               { key-positions = <11 12>;  bindings = <&kp CARET>;     layers = <NUM_L>;       };
        dollar              { key-positions = <12 13>;  bindings = <&kp DOLLAR>;    layers = <NUM_L>;       };
        ampersand           { key-positions = <20 21>;  bindings = <&kp AMPERSAND>; layers = <NUM_L>;       };
        percent             { key-positions = <21 22>;  bindings = <&kp PERCENT>;   layers = <NUM_L>;       };

        /* Convenience */
        esc                 { key-positions = <3 4>;    bindings = <&kp ESC>;                               };
        del                 { key-positions = <13 14>;  bindings = <&kp DEL>;                               };
        select_all          { key-positions = <20 21>;  bindings = <&kp LC(A)>;     layers = <NAV_L>;       };
        thumb_ctrl          { key-positions = <26 28>;  bindings = <&kp LCTRL>;     slow-release;           };
        thumb_alt           { key-positions = <26 29>;  bindings = <&kp LALT>;      slow-release;           };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp W      &kp F      &kp M      &kp P      &kp G          &kp K      &kp U      &kp O      &kp Y      &kp QUOT
                &kp R      &kp S      &kp N      &kp T      &kp B          &kp J      &kp A      &kp E      &kp I      &kp H
                           &kp C      &kp L      &kp D                                &kp X      &kp COMMA  &kp DOT
                                      &sl_nav    &kp SPACE                 &sk LSHIFT &sl NUM_L
               
            >;
        };
        num_layer {
            label = "Num";
            bindings = <
                &kp PLUS   &kp N7     &kp N8     &kp N9     &kp ASTRK      &kp HASH   &kp AT     &kp EXCL   &kp QMARK  &kp DQT
                &kp MINUS  &kp N4     &kp N5     &kp N6     &kp FSLH       &kp TILDE  &kp EQUAL  &kp SEMI   &kp COLON  &kp GRAVE
                           &kp N1     &kp N2     &kp N3                               &kp UNDER  &kp LT     &kp GT
                                                 &trans     &kp N0         &trans     &trans
            >;
        };
        nav_layer {
            label = "Nav";
            bindings = <
                &kp F1     &kp F2     &kp F3     &kp F4     &kp F5         &kp ESC    &kp HOME   &kp UARW   &kp END    &kp PG_UP
                &sm LGUI   &sm LALT   &sm LSHFT  &sm LCTRL  &kp LC(Z)      &kp TAB    &kp LARW   &kp ENTER  &kp RARW   &kp PG_DN
                           &cut       &copy      &paste                               &kp BSPC   &kp DARW   &kp DEL
                                                 &trans     &trans         &kp LCTRL  &kp LALT
            >;
        };
    };
};
