/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF_L 0
#define NAV_L 1
#define UPP_L 2
#define SYM_L 3
#define NUM_L 4

/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4  │  │  5   6   7   8   9 │
  │ 10  11  12  13  14  │  │ 15  16  17  18  19 │
  │     20  21  22      │  │     23  24  25     │
  ╰───────────╮ 26  27 │ │ 28  29 ╭───────────╯
              ╰────────╯ ╰────────╯            */

/ {
    combos {
        compatible = "zmk,combos";
        combo_k {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp K>;
            layers = <DEF_L>;
        };
        combo_z {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp Z>;
            layers = <DEF_L>;
        };
        combo_j {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp J>;
            layers = <DEF_L>;
        };
        combo_upper_k {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LS(K)>;
            layers = <UPP_L>;
        };
        combo_upper_z {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LS(Z)>;
            layers = <UPP_L>;
        };
        combo_upper_j {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp LS(J)>;
            layers = <UPP_L>;
        };
        combo_slash {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp SLASH>;
            layers = <DEF_L UPP_L>;
        };
        combo_colon {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp COLON>;
            layers = <DEF_L UPP_L>;
        };
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <23 25>;
            bindings = <&kp SEMICOLON>;
            layers = <DEF_L UPP_L>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp ESC>;
            layers = <DEF_L>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp DEL>;
            layers = <DEF_L>;
        };        
        combo_select_all {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LC(A)>;
            layers = <NAV_L>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <UPP_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &kp Q      &kp W      &kp D      &kp F      &kp G      &kp Y      &kp U      &kp R      &kp L      &kp QUOT 
    &kp A      &kp S      &kp E      &kp T      &kp B      &kp P      &kp N      &kp I      &kp O      &kp H
               &kp X      &kp C      &kp V                            &kp M      &kp COMMA  &kp DOT
               &mo NAV_L             &kp SPACE                        &mo UPP_L             &mo SYM_L
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
    &kp F1     &kp F2     &kp F3       &kp F4     &kp F5     &kp PG_UP  &kp HOME   &kp UARW   &kp END    &none
    &sk LGUI   &sk LALT   &sk LSHFT    &sk LCTRL  &kp LC(Z)  &kp PG_DN  &kp LARW   &kp ENTER  &kp RARW   &kp ESC
               &kp LC(X)  &kp LC(C)    &kp LC(V)                        &kp TAB    &kp DARW   &key_repeat
               &trans                    &trans                         &kp BSPC              &kp DEL
            >;
        };

        upper_layer {
            bindings = <
    &kp LS(Q)  &kp LS(W)  &kp LS(D)  &kp LS(F)  &kp LS(G)  &kp LS(Y)  &kp LS(U)  &kp LS(R)  &kp LS(L)  &kp DQT
    &kp LS(A)  &kp LS(S)  &kp LS(E)  &kp LS(T)  &kp LS(B)  &kp LS(P)  &kp LS(N)  &kp LS(I)  &kp LS(O)  &kp LS(H)
               &kp LS(X)  &kp LS(C)  &kp LS(V)                        &kp LS(M)  &kp EXCL   &kp QMARK
               &caps_word            &kp LS(SPACE)                    &trans                &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
    &kp PIPE2  &kp LBKT   &kp LPAR   &kp LBRC   &kp PLUS  &kp AMPS    &kp RBRC   &kp RPAR   &kp RBKT   &kp GRAVE
    &kp TILDE  &kp MINUS  &kp ASTRK  &kp EQUAL  &kp PRCNT &kp CARET   &sk LCTRL  &sk LSHFT  &sk LALT   &sk LGUI
               &kp AT     &kp POUND  &kp DLLR                         &kp BSLH   &kp LT     &kp GT
               &kp UNDER                &trans                           &trans                &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
    &none      &kp N7     &kp N8     &kp N9     &none      &kp F6     &kp F7     &kp F8     &kp F9     &kp F10
    &kp MINUS  &kp N4     &kp N5     &kp N6     &kp SLASH  &kp F11    &sk LCTRL  &sk LSHFT  &sk LALT   &sk LGUI
               &kp N1     &kp N2     &kp N3                           &kp F12    &kp COMMA  &kp DOT
               &kp N0                &trans                           &trans                &trans
            >;
        };
    };
};
